// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  if (window.app == null) {
    window.app = {};
  }

  app = window.app;

  app.taskView = Backbone.View.extend({
    tagName: 'li',
    template: _.template($('#item-template').html()),
    events: {
      'click .toggle': 'toggleCompleted',
      'dblclick label': 'edit',
      'click .destroy': 'clear',
      'keypress .edit': 'updateOnEnter',
      'blur .edit': 'close'
    },
    initialize: function() {
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'destroy', this.remove);
      return this.listenTo(this.model, 'visible', this.toggleVisible);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.toggleClass('completed', this.model.get('completed'));
      this.toggleVisible;
      this.$input = this.$('.edit');
      return this;
    },
    toggleVisible: function() {
      return this.$el.toggleClass('hidden', this.isHidden());
    },
    isHidden: function() {
      var isCompleted;
      isCompleted = this.model.get('completed');
      return (!isCompleted && app.taskFilter === 'completed') || (isCompleted && app.taskFilter === 'active');
    },
    toggleCompleted: function() {
      return this.model.toggle();
    },
    edit: function() {
      this.$el.addClass('editing');
      return this.$input.focus();
    },
    close: function() {
      var value;
      value = this.$input.val().trim();
      if (value) {
        this.model.save({
          title: value
        });
      } else {
        this.clear();
      }
      return this.$el.removeClass('editing');
    },
    updateOnEnter: function(event) {
      if (event.which === ENTER_KEY) {
        return this.close();
      }
    },
    clear: function() {
      return this.model.destroy();
    }
  });

}).call(this);

/*
//@ sourceMappingURL=task_views.map
*/
