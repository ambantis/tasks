// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var AppView, ENTER_KEY, Task, TaskList, TaskView, Tasks, TodoRouter, Workspace;
    ENTER_KEY = 13;
    AppView = Backbone.View.extend({
      el: '#taskapp',
      statsTemplate: _.template($('#stats-template').html()),
      events: {
        'keypress #new-task': 'createOnEnter',
        'click #clear-completed': 'clearCompleted',
        'click #toggle-all': 'toggleAllComplete'
      },
      initialize: function() {
        this.allCheckbox = this.$('#toggle-all')[0];
        this.$input = this.$('#new-task');
        this.$footer = this.$('#footer');
        this.$main = this.$('#main');
        this.listenTo(Tasks, 'add', this.addOne);
        this.listenTo(Tasks, 'reset', this.addAll);
        this.listenTo(Tasks, 'change:completed', this.filterOne);
        this.listenTo(Tasks, 'filter', this.filterAll);
        this.listenTo(Tasks, 'all', this.render);
        return Tasks.fetch();
      },
      render: function() {
        var completed, remaining;
        completed = Tasks.completed().length;
        remaining = Tasks.remaining().length;
        if (Tasks.length) {
          this.$main.show();
          this.$footer.show();
          this.$footer.html(this.statsTemplate({
            completed: completed,
            remaining: remaining
          }));
          this.$('#filters li a').removeClass('selected').filter("[href=\"#/" + (TaskFilter || '') + "\"]").addClass('selected');
        } else {
          this.$main.hide();
          this.$footer.hide();
        }
        return this.allCheckbox.checked = !remaining;
      },
      addOne: function(task) {
        var view;
        view = new TaskView({
          model: task
        });
        return $('#task-list').append(view.render().el);
      },
      addAll: function() {
        this.$('#task-list').html('');
        return Tasks.each(this.addOne, this);
      },
      filterOne: function(task) {
        return task.trigger('visible');
      },
      filterAll: function() {
        return Tasks.each(this.filterOne, this);
      },
      newAttributes: function() {
        return {
          title: this.$input.val().trim(),
          order: Tasks.nextOrder(),
          completed: false
        };
      },
      createOnEnter: function(event) {
        if (event.which === ENTER_KEY && this.$input.val().trim()) {
          Tasks.create(this.newAttributes());
          return this.$input.val('');
        }
      },
      clearCompleted: function() {
        _.invoke(Tasks.completed(), 'destroy');
        return false;
      },
      toggleAllComplete: function() {
        var completed;
        completed = this.allCheckbox.checked;
        return Tasks.each(function(task) {
          return task.save({
            'completed': completed
          });
        });
      }
    });
    Task = Backbone.Model.extend({
      defaults: {
        title: ''
      },
      toggle: function() {
        return this.save({
          completed: !this.get('completed')
        });
      }
    });
    TaskList = Backbone.Collection.extend({
      model: Task,
      localStorage: new Backbone.LocalStorage('tasks-backbone'),
      completed: function() {
        return this.filter(function(task) {
          return task.get('completed');
        });
      },
      remaining: function() {
        return this.without.apply(this, this.completed);
      },
      nextOrder: function() {
        if (!this.length) {
          return 1;
        } else {
          return this.last().get('order') + 1;
        }
      },
      comparator: function(task) {
        return task.get('order');
      }
    });
    TaskView = Backbone.View.extend({
      tagName: 'li',
      template: _.template($('#item-template').html()),
      events: {
        'click .toggle': 'togglecompleted',
        'dbleclick label': 'edit',
        'click .destroy': 'clear',
        'keypress .edit': 'updateOnEnter',
        'blur .edit': 'close'
      },
      initialize: function() {
        this.listenTo(this.model, 'change', this.render);
        this.listenTo(this.model, 'destroy', this.remove);
        return this.listenTo(this.model, 'visible', this.toggleVisible);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$el.toggleClass('completed', this.model.get('completed'));
        this.toggleVisible;
        this.$input = this.$('.edit');
        return this;
      },
      toggleVisible: function() {
        return this.$el.toggleClass('hidden', this.isHidden);
      },
      isHidden: function() {
        var isCompleted;
        isCompleted = this.model.get('completed');
        return (!isCompleted && TaskFilter === 'completed') || (isCompleted && TaskFilter === 'active');
      },
      toggleCompleted: function() {
        return this.model.toggle();
      },
      edit: function() {
        this.$el.addClass('editing');
        return this.$input.focus();
      },
      close: function() {
        var value;
        value = this.$input.val().trim();
        if (value) {
          this.model.save({
            title: value
          });
        } else {
          this.clear();
        }
        return this.$el.removeClass('editing');
      },
      updateOnEnter: function(event) {
        if ((event.which === ENTER_KEY)(this.close())) {

        } else {

        }
      },
      clear: function() {
        return this.model.destroy();
      }
    });
    Workspace = Backbone.Router.extend({
      routes: {
        '*filter': 'setFilter'
      },
      setFilter: function(param) {
        var TaskFilter;
        if (param) {
          param = param.trim();
        }
        TaskFilter = param || '';
        return Tasks.trigger('filter');
      }
    });
    Tasks = new TaskList();
    TodoRouter = new Workspace();
    new TaskView();
    return Backbone.history.start();
  });

}).call(this);

/*
//@ sourceMappingURL=all.map
*/
